name: Build and Release

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:

  build-launcher:
    runs-on: windows-latest
    strategy:
      matrix:
        platform: [x64, x86]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore Juliaup.sln

    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /property:Configuration=Release /property:Platform=${{ matrix.platform }} Juliaup.sln
    - uses: actions/upload-artifact@v2
      with:
        name: launcher
        path: build\output\${{matrix.platform}}\Release\launcher

  build-juliaup:
    runs-on: windows-latest
    strategy:
      matrix:
        platform: [x64]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - uses: julia-actions/setup-julia@v1
      with:
        version: 1.6.1
        arch: ${{matrix.platform}}
    - name: Run PackageCompiler
      run: |
        julia .\Juliaup\build.jl
    - uses: actions/upload-artifact@v2
      with:
        name: juliaup
        path: build\juliaup\${{matrix.platform}}
  
  prepare-bundled-julia:
    runs-on: windows-latest
    strategy:
      matrix:
        platform: [{form1: 'x64', form2: 'win64'}, {form1: 'x86', form2: 'win32'}]
    steps:
    - uses: actions/checkout@v2
    - name: Read version info
      id: bundledversion
      run: |
        $versions = Get-Content versions.json | ConvertFrom-Json
        [version]$bundledVersion = $versions.JuliaAppPackage.BundledJuliaVersion
        $bundledVersionAsString = $versions.JuliaAppPackage.BundledJuliaVersion
        $bundledMajorVersionAsString = $bundledVersion.Major
        $bundledMinorVersionAsString = $bundledVersion.Minor
        echo "::set-output name=bundledVersion::$bundledVersionAsString"
        echo "::set-output name=bundledMajorVersion::$bundledMajorVersionAsString"
        echo "::set-output name=bundledMinorVersion::$bundledMinorVersionAsString"
    - name: Create folders
      run: |
        mkdir -Force build\downloads
        mkdir -Force build\juliaversions\${{matrix.platform.form1}}
    - name: Download Julia archive
      run: |
        if (-Not (Test-Path ".\build\downloads\julia-${{steps.bundledversion.outputs.bundledVersion}}-${{matrix.platform.form2}}.tar.gz"))
        {
          Invoke-WebRequest "https://julialang-s3.julialang.org/bin/winnt/${{matrix.platform.form1}}/${{steps.bundledversion.outputs.bundledMajorVersion}}.${{steps.bundledversion.outputs.bundledMinorVersion}}/julia-${{steps.bundledversion.outputs.bundledVersion}}-${{matrix.platform.form2}}.tar.gz" -OutFile "build\downloads\julia-${{steps.bundledversion.outputs.bundledVersion}}-${{matrix.platform.form2}}.tar.gz"
        }
    - name: Extract Julia archive
      run: |
        if (-Not (Test-Path "build\juliaversions\${{matrix.platform.form1}}\julia-$($bundledVersionAsString)"))
        {
          tar -xvzf "build\downloads\julia-${{steps.bundledversion.outputs.bundledVersion}}-${{matrix.platform.form2}}.tar.gz" -C build\juliaversions\${{matrix.platform.form1}}
        }
    - uses: actions/upload-artifact@v2
      with:
        name: bundled-julia
        path: build\juliaversions\${{matrix.platform.form1}}

  build-msix:
    needs: [build-launcher, build-juliaup, prepare-bundled-julia]
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/download-artifact@v2
      with:
        name: [bundled-julia, launcher, juliaup]
    - name: Read version info
      id: msixversion
      run: |
        $versions = Get-Content versions.json | ConvertFrom-Json
        echo "::set-output name=msixversion::$(versions.JuliaAppPackage.Version)"
    - name: Build MSIX
      run: |
        push-location msix
        MakeAppx.exe build /f PackagingLayout.xml /op ..\build\msix /pv ${{steps.msixversion.outputs.msixversion}} /bv ${{steps.msixversion.outputs.msixversion}}
        pop-location
    - uses: actions/upload-artifact@v2
      with:
        name: msixinstaller
        path: build\msix\*.appxbundle
